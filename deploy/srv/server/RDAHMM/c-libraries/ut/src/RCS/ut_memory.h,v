head	1.2;
access;
symbols;
locks
	agray:1.2; strict;
comment	@ * @;


1.2
date	97.07.29.03.26.43;	author agray;	state Exp;
branches;
next	1.1;

1.1
date	97.01.29.23.44.54;	author agray;	state Exp;
branches;
next	;


desc
@new version after much reformatting/rethinking.
@


1.2
log
@moved out all matrix/vector stuff to da_memory.
@
text
@/*******************************************************************************
MODULE HEADER:
ut_memory.h
*******************************************************************************/

#ifndef _UT_MEMORY_H_
#define _UT_MEMORY_H_
/* Protects from multiple inclusion. */

#ifndef lint
static char ut_memory_h_rcsid[] = "$Id: ut_memory.h,v 1.1 1997/01/29 23:44:54 agray Exp agray $";
#endif
/* This string variable allows the RCS identification info to be printed. */

/* 
 * $Log: ut_memory.h,v $
 * Revision 1.1  1997/01/29 23:44:54  agray
 * Initial revision
 *
 * */

/*==============================================================================
Data Structures
==============================================================================*/

/*==============================================================================
Constants, Macros
==============================================================================*/

/*******************************************************************************
MALLOC_REPORT_IF_FAIL
Attempt to allocate a chunk of memory.  If the attempt fails, report an error.

Note that the caller can pretend that this macro returns the memory pointer
needed, i.e. one can say "array = (int*) malloc_report_if_fail(s)".
AG
*******************************************************************************/
#define malloc_report_if_fail(s) \
  ut_status_ptr = (void*) malloc_and_track(s); \
  sprintf(ut_err_msg, "Couldn't allocate memory chunk of size %d\n", s); \
  report_if_null(ut_status_ptr, ut_err_msg);

/*******************************************************************************
MALLOC_RETURN_IF_FAIL
Attempt to allocate a chunk of memory.  If the attempt fails, report an error
and return from the calling function.  (Only a macro can do this.)

Note that the caller can pretend that this macro returns the memory pointer
needed, i.e. one can say "array = (int*) malloc_return_if_fail(s)".
AG
*******************************************************************************/
#define malloc_return_if_fail(s,r) \
  ut_status_ptr = (void*) malloc_and_track(s); \
  sprintf(ut_err_msg, "Couldn't allocate memory chunk of size %d\n", s); \
  return_if_null(ut_status_ptr, ut_err_msg, r);

/*******************************************************************************
MALLOC_EXIT_IF_FAIL
Attempt to allocate a chunk of memory.  If the attempt fails, report an error
and exit from the calling program.  Closes the log file first.

Note that the caller can pretend that this macro returns the memory pointer
needed, i.e. one can say "array = (int*) malloc_exit_if_fail(s)".
AG
*******************************************************************************/
#define malloc_exit_if_fail(s) \
  ut_status_ptr = (void*) malloc_and_track(s); \
  sprintf(ut_err_msg, "Couldn't allocate memory chunk of size %d\n", s); \
  exit_if_null(ut_status_ptr, ut_err_msg);

/*==============================================================================
Variables
==============================================================================*/

extern int ut_mem_used;
extern int ut_mem_allocated;

/*==============================================================================
Function Declarations
==============================================================================*/

/* general memory allocation and de-allocation */

void* malloc_and_track(int size);
void free_and_track(void *mem, int size);

#endif /* _UT_MEMORY_H_ */
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char ut_memory_h_rcsid[] = "$Id$";
d16 4
a19 1
 * $Log$
a70 79
/*******************************************************************************
MATRIX_REPORT_IF_FAIL, MATRIX_RETURN_IF_FAIL, MATRIX_EXIT_IF_FAIL
Attempt to allocate a matrix.  If the attempt fails, perform some error hand-
ling.  Analogous to the malloc_report_if_fail(), etc. macros.
*******************************************************************************/
#define matrix_report_if_fail(nr,nc) \
  ut_status_ptr = (void*) matrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d matrix\n", nr,nc); \
  report_if_null(ut_status_ptr, ut_err_msg);

#define matrix_return_if_fail(nr,nc,r) \
  ut_status_ptr = (void*) matrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d matrix\n", nr,nc); \
  return_if_null(ut_status_ptr, ut_err_msg, r);

#define matrix_exit_if_fail(nr,nc) \
  ut_status_ptr = (void*) matrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d matrix\n", nr,nc); \
  exit_if_null(ut_status_ptr, ut_err_msg);


/*******************************************************************************
DMATRIX_REPORT_IF_FAIL, DMATRIX_RETURN_IF_FAIL, DMATRIX_EXIT_IF_FAIL
Analogous to the matrix_report_if_fail(), etc. macros.
*******************************************************************************/
#define dmatrix_report_if_fail(nr,nc) \
  ut_status_ptr = (void*) dmatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d dmatrix\n", nr,nc); \
  report_if_null(ut_status_ptr, ut_err_msg);

#define dmatrix_return_if_fail(nr,nc,r) \
  ut_status_ptr = (void*) dmatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d dmatrix\n", nr,nc); \
  return_if_null(ut_status_ptr, ut_err_msg, r);

#define dmatrix_exit_if_fail(nr,nc) \
  ut_status_ptr = (void*) dmatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d dmatrix\n", nr,nc); \
  exit_if_null(ut_status_ptr, ut_err_msg);

/*******************************************************************************
CMATRIX_REPORT_IF_FAIL, CMATRIX_RETURN_IF_FAIL, CMATRIX_EXIT_IF_FAIL
Analogous to the matrix_report_if_fail(), etc. macros.
*******************************************************************************/
#define cmatrix_report_if_fail(nr,nc) \
  ut_status_ptr = (void*) cmatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d cmatrix\n", nr,nc); \
  report_if_null(ut_status_ptr, ut_err_msg);

#define cmatrix_return_if_fail(nr,nc,r) \
  ut_status_ptr = (void*) cmatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d cmatrix\n", nr,nc); \
  return_if_null(ut_status_ptr, ut_err_msg, r);

#define cmatrix_exit_if_fail(nr,nc) \
  ut_status_ptr = (void*) cmatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d cmatrix\n", nr,nc); \
  exit_if_null(ut_status_ptr, ut_err_msg);

/*******************************************************************************
IMATRIX_REPORT_IF_FAIL, IMATRIX_RETURN_IF_FAIL, IMATRIX_EXIT_IF_FAIL
Analogous to the matrix_report_if_fail(), etc. macros.
*******************************************************************************/
#define imatrix_report_if_fail(nr,nc) \
  ut_status_ptr = (void*) imatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d imatrix\n", nr,nc); \
  report_if_null(ut_status_ptr, ut_err_msg);

#define imatrix_return_if_fail(nr,nc,r) \
  ut_status_ptr = (void*) imatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d imatrix\n", nr,nc); \
  return_if_null(ut_status_ptr, ut_err_msg, r);

#define imatrix_exit_if_fail(nr,nc) \
  ut_status_ptr = (void*) imatrix_and_track(nr,nc); \
  sprintf(ut_err_msg, "Couldn't allocate %d x %d imatrix\n", nr,nc); \
  exit_if_null(ut_status_ptr, ut_err_msg);


a85 12

/* matrix allocation and de-allocation */

float** matrix_and_track(int nr, int nc);
int** imatrix_and_track(int nr, int nc);
unsigned char** cmatrix_and_track(int nr, int nc);
double** dmatrix_and_track(int nr, int nc);

void free_matrix_and_track(float **mat, int nr, int nc);
void free_cmatrix_and_track(unsigned char **mat, int nr, int nc);
void free_imatrix_and_track(int **mat, int nr, int nc);
void free_dmatrix_and_track(double **mat, int nr, int nc);
@
