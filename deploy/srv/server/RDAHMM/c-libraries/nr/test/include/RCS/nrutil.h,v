head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	96.09.20.21.09.50;	author granat;	state Exp;
branches;
next	1.3;

1.3
date	96.09.18.17.15.21;	author granat;	state Exp;
branches;
next	1.2;

1.2
date	96.07.25.18.15.11;	author granat;	state Exp;
branches;
next	1.1;

1.1
date	96.07.25.17.28.17;	author agray;	state Exp;
branches;
next	;


desc
@Numerical Recipes header file for general-purpose NR functions and macros.
@


1.4
log
@changed prototype of free_cmatrix so that it uses unsigned chars instead
of chars
@
text
@/* CAUTION: This is the ANSI C (only) version of the Numerical Recipes
   utility file nrutil.h.  Do not confuse this file with the same-named
   file nrutil.h that is supplied in the 'misc' subdirectory.
   *That* file is the one from the book, and contains both ANSI and
   traditional K&R versions, along with #ifdef macros to select the
   correct version.  *This* file contains only ANSI C.               */

/* added cmatrix() - exactly analagous to matrix(), dmatrix(), imatrix();
   also free_cmatrix()
   ag 2/28/96 */

#ifndef _NR_UTILS_H_
#define _NR_UTILS_H_

#ifndef lint
static char nr_utils_hdr_rcsid[] = "$Id: nrutil.h,v 1.3 1996/09/18 17:15:21 granat Exp granat $";
#endif
/* 
 * $Log: nrutil.h,v $
 * Revision 1.3  1996/09/18 17:15:21  granat
 * Changed cmatrix prototype so that it makes matrices of unsigned chars;
 * Added prototype for csubmatrix function
 *
 * Revision 1.2  1996/07/25 18:15:11  granat
 * added prototype for nrerror2
 *
 * Revision 1.1  1996/07/25 17:28:17  agray
 * Initial revision
 *
 * */

static float sqrarg;
#define SQR(a) ((sqrarg=(a)) == 0.0 ? 0.0 : sqrarg*sqrarg)

static double dsqrarg;
#define DSQR(a) ((dsqrarg=(a)) == 0.0 ? 0.0 : dsqrarg*dsqrarg)

static double dmaxarg1,dmaxarg2;
#define DMAX(a,b) (dmaxarg1=(a),dmaxarg2=(b),(dmaxarg1) > (dmaxarg2) ?\
        (dmaxarg1) : (dmaxarg2))

static double dminarg1,dminarg2;
#define DMIN(a,b) (dminarg1=(a),dminarg2=(b),(dminarg1) < (dminarg2) ?\
        (dminarg1) : (dminarg2))

static float maxarg1,maxarg2;
#define FMAX(a,b) (maxarg1=(a),maxarg2=(b),(maxarg1) > (maxarg2) ?\
        (maxarg1) : (maxarg2))

static float minarg1,minarg2;
#define FMIN(a,b) (minarg1=(a),minarg2=(b),(minarg1) < (minarg2) ?\
        (minarg1) : (minarg2))

static long lmaxarg1,lmaxarg2;
#define LMAX(a,b) (lmaxarg1=(a),lmaxarg2=(b),(lmaxarg1) > (lmaxarg2) ?\
        (lmaxarg1) : (lmaxarg2))

static long lminarg1,lminarg2;
#define LMIN(a,b) (lminarg1=(a),lminarg2=(b),(lminarg1) < (lminarg2) ?\
        (lminarg1) : (lminarg2))

static int imaxarg1,imaxarg2;
#define IMAX(a,b) (imaxarg1=(a),imaxarg2=(b),(imaxarg1) > (imaxarg2) ?\
        (imaxarg1) : (imaxarg2))

static int iminarg1,iminarg2;
#define IMIN(a,b) (iminarg1=(a),iminarg2=(b),(iminarg1) < (iminarg2) ?\
        (iminarg1) : (iminarg2))

#define SIGN(a,b) ((b) >= 0.0 ? fabs(a) : -fabs(a))

void nrerror(char error_text[]);
void nrerror2(char error_text[]);
float *vector(long nl, long nh);
int *ivector(long nl, long nh);
unsigned char *cvector(long nl, long nh);
unsigned long *lvector(long nl, long nh);
double *dvector(long nl, long nh);
float **matrix(long nrl, long nrh, long ncl, long nch);
double **dmatrix(long nrl, long nrh, long ncl, long nch);
int **imatrix(long nrl, long nrh, long ncl, long nch);
unsigned char **cmatrix(long nrl, long nrh, long ncl, long nch);
float **submatrix(float **a, long oldrl, long oldrh, long oldcl, long oldch,
	long newrl, long newcl);
unsigned char **csubmatrix(unsigned char **a, long oldrl, long oldrh, 
                          long oldcl, long oldch, long newrl, long newcl);
float **convert_matrix(float *a, long nrl, long nrh, long ncl, long nch);
float ***f3tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh);
void free_vector(float *v, long nl, long nh);
void free_ivector(int *v, long nl, long nh);
void free_cvector(unsigned char *v, long nl, long nh);
void free_lvector(unsigned long *v, long nl, long nh);
void free_dvector(double *v, long nl, long nh);
void free_matrix(float **m, long nrl, long nrh, long ncl, long nch);
void free_dmatrix(double **m, long nrl, long nrh, long ncl, long nch);
void free_imatrix(int **m, long nrl, long nrh, long ncl, long nch);
void free_cmatrix(unsigned char **m, long nrl, long nrh, long ncl, long nch);
void free_submatrix(float **b, long nrl, long nrh, long ncl, long nch);
void free_convert_matrix(float **b, long nrl, long nrh, long ncl, long nch);
void free_f3tensor(float ***t, long nrl, long nrh, long ncl, long nch,
	long ndl, long ndh);

#endif /* _NR_UTILS_H_ */
@


1.3
log
@Changed cmatrix prototype so that it makes matrices of unsigned chars;
Added prototype for csubmatrix function
@
text
@d16 1
a16 1
static char nr_utils_hdr_rcsid[] = "$Id: nrutil.h,v 1.2 1996/07/25 18:15:11 granat Exp granat $";
d20 4
d97 1
a97 1
void free_cmatrix(char **m, long nrl, long nrh, long ncl, long nch);
@


1.2
log
@added prototype for nrerror2
@
text
@d16 1
a16 1
static char nr_utils_hdr_rcsid[] = "$Id: nrutil.h,v 1.1 1996/07/25 17:28:17 agray Exp granat $";
d20 3
d78 1
a78 1
char **cmatrix(long nrl, long nrh, long ncl, long nch);
d81 2
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
static char nr_utils_hdr_rcsid[] = "$Id$";
d19 4
a22 1
 * $Log$
d66 1
@
