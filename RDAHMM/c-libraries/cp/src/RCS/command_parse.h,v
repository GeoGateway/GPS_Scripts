head	1.4;
access
	agray
	roden
	jctran;
symbols
	NSWC1:1.4
	ATT1:1.1
	Initial:1.1;
locks; strict;
comment	@ * @;


1.4
date	95.09.06.00.05.11;	author jctran;	state Exp;
branches;
next	1.3;

1.3
date	95.08.23.18.43.31;	author jctran;	state Exp;
branches;
next	1.2;

1.2
date	95.08.03.23.38.08;	author jctran;	state Exp;
branches;
next	1.1;

1.1
date	95.07.27.22.07.29;	author agray;	state Exp;
branches;
next	;


desc
@Header for command_parse.h.
U. Fayyad.
@


1.4
log
@Update for compiling with cc.
JCT
@
text
@/* command_parse.h */

#ifndef COMMAND_PARSE_HDR
#define COMMAND_PARSE_HDR

#ifndef lint
static char command_parse_hdr_rcsid[] = "$Id: command_parse.h,v 1.3 1995/08/23 18:43:31 jctran Exp jctran $";
#endif
/* $Log: command_parse.h,v $
 * Revision 1.3  1995/08/23  18:43:31  jctran
 * Edited Set_Args macro.
 * JCT
 *
 * Revision 1.2  1995/08/03  23:38:08  jctran
 * Added macros for command line arg checking.
 * JCT
 *
 * Revision 1.1  1995/07/27  22:07:29  agray
 * Initial revision
 *
 * Revision 1.1  1995/07/27  22:07:29  agray
 * Initial revision
 * */

/* inclusion set */
#include "cp_platform.h"

/* constants */
#define   BOOLEAN        int
#ifndef TRUE
#define   TRUE           1
#define   FALSE          0
#endif
#define   Get_Arg_ERROR  -1
#define   Get_Arg_OK     0

#define   MAX_BUFF       1024

/* typedefs */
typedef struct
     {
     char      *com_str;
     BOOLEAN   optional;
     int       nargs;
     BOOLEAN   exists;
     char      *arg_str;
     char      *doc_str;
     } arg, *arg_ptr;

/* macro accessors */
#define  Init_Arg(args,i,name,optflag,na,doc)    \
		args[i].com_str=name; \
		args[i].optional=optflag; \
		args[i].nargs=na; \
                args[i].doc_str=doc;

/* macros */
#define Set_Arg(args,i,var)						if (args[i].exists) var = args[i].arg_str
#define cpCmdLineArgsExist(A)					(A > CP_CMD_LINE_ARGS_ONE)
#define cpCmdLineArgsNotExist(A)				(A <= CP_CMD_LINE_ARGS_ONE)

#if (CP_NUM_OF_CMD_LINE_ARGS == CP_CMD_LINE_ARGS_ZERO)
	#undef cpCmdLineArgsExist
	#define cpCmdLineArgsExist(A)					(A > CP_CMD_LINE_ARGS_ZERO)
	#undef cpCmdLineArgsNotExist
	#define cpCmdLineArgsNotExist(A)				(A <= CP_CMD_LINE_ARGS_ZERO)
#endif

/* function prototypes */
#ifdef __STDC__
int get_arg_match(char *comstr, arg args[], int nargs);
int Print_Args(arg args[], int nargs);
int Get_Args(int argc, char *argv[], arg args[], int nargs);
int print_usage(char *com_name, arg args[], int nargs);

#endif

int get_arg_match();
int Print_Args();
int Get_Args();
int print_usage();


#endif
@


1.3
log
@Edited Set_Args macro.
JCT
@
text
@d7 1
a7 1
static char command_parse_hdr_rcsid[] = "$Id: command_parse.h,v 1.2 1995/08/03 23:38:08 jctran Exp jctran $";
d10 4
d31 2
a32 2
	#define   TRUE           1
	#define   FALSE          0
@


1.2
log
@Added macros for command line arg checking.
JCT
@
text
@d7 1
a7 1
static char command_parse_hdr_rcsid[] = "$Id: command_parse.h,v 1.1 1995/07/27 22:07:29 agray Exp $";
d10 4
d54 1
a54 1
#define Set_Arg(args,i,var)						(if (args[i].exists) var = args[i].arg_str)
@


1.1
log
@Initial revision
@
text
@d1 2
d7 1
a7 1
static char command_parse_hdr_rcsid[] = "$Id$";
d9 7
a15 1
/* $Log$ */
d17 2
d20 1
d22 4
a25 2
#define   TRUE           1
#define   FALSE          0
d31 1
d42 1
a42 3

int Get_Args();

d49 26
a74 1
#define  Set_Arg(args,i,var)  if (args[i].exists) var = args[i].arg_str 
@
