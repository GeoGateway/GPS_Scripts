head	1.7;
access;
symbols;
locks
	granat:1.7; strict;
comment	@ * @;


1.7
date	98.04.21.17.38.05;	author roden;	state Exp;
branches;
next	1.6;

1.6
date	97.06.20.22.14.36;	author granat;	state Exp;
branches;
next	1.5;

1.5
date	97.01.29.21.52.15;	author agray;	state Exp;
branches;
next	1.4;

1.4
date	96.10.31.02.20.44;	author agray;	state Exp;
branches;
next	1.3;

1.3
date	96.09.23.22.45.54;	author agray;	state Exp;
branches;
next	1.2;

1.2
date	96.09.13.01.23.02;	author agray;	state Exp;
branches;
next	1.1;

1.1
date	96.07.19.17.59.42;	author agray;	state Exp;
branches;
next	;


desc
@parallel version of da_dist
@


1.7
log
@Took out #include <pvm3.h> because I think it's not needed here, and it
doesn't conform to da_platform.h control over presence/absence of pvm.
@
text
@/*******************************************************************************
MODULE NAME
da_signal_pp

ONE-LINE SYNOPSIS
Parallel general functions related to signal processing.

SCOPE OF THIS MODULE
Analogous to da_signal in scope, except that functions in this module are
written to run on a parallel machine.  

SEE ALSO
Most or all of the functions in this module are mirrors of their serial versions
in da_signal.

REFERENCE(S)
-

PROGRAM EXAMPLE(S)
1. /proj/cooltools/qf, RG.

NOTES
-

AG
*******************************************************************************/
#ifndef lint
static char rcsid[] = "$Id: da_signal_pp.c,v 1.6 1997/06/20 22:14:36 granat Exp roden $";
#endif
/* 
 * $Log: da_signal_pp.c,v $
 * Revision 1.6  1997/06/20 22:14:36  granat
 * changed to match changes in NR library
 *
 * Revision 1.5  1997/01/29 21:52:15  agray
 * new formatting, cleaning up debugging output using ut_output.
 *
 * Revision 1.4  1996/10/31 02:20:44  agray
 * renamed from "da_dist_pp" to "da_signal_pp";
 * changed .h and .c formats throughout library;
 * some reorganizing between modules;
 * 
 * Revision 1.3  1996/09/23 22:45:54  agray
 * added pvm3.h inclusion.
 * 
 * Revision 1.2  1996/09/13 01:23:02  agray
 * change name and comments for normalize_data_pp(). added some headers.
 * 
 * Revision 1.1  1996/07/19 17:59:42  agray
 * Initial revision
 * 
 * */

/* C library */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

/* UT library */
#include "ut_error.h"
#include "ut_output.h"
#include "ut_types.h"

/* NR library */
#include "nr.h"

/* DA library */
#include "da_comm_pp.h"

/* this module's header */
#include "da_signal_pp.h"


/*******************************************************************************
RANGE_NORMALIZE_COLS_PP
For each of k columns in a matrix, find the minimum and maximum values, and
the range (difference between the two).  Pass in a size k vector for each of 
these latter sets of values, and they will be filled in by this function.  
Modifies the original matrix such that each value in each column is normalized
ized by the range of that column.  Thus, all entries in the matrix will end up
scaled from 0-1.  Does this in parallel.
AG
*******************************************************************************/
int range_normalize_cols_pp(float **mat, float *minval, float *maxval, 
                            float *range, int numrows, int numcols, int pe, 
                            int numPE)

{
  int   i,j, p, cc;
  float *otherminval, *othermaxval;

  /* create storage for the passed min/max values */
  otherminval = NR_vector(1,numcols);
  othermaxval = NR_vector(1,numcols);

  /* for each attribute, find the min and max */
  for (j=1; j<=numcols; j++)
    minval[j] = maxval[j] = mat[1][j];

  for (i=2; i<=numrows; i++)
    for (j=1; j<=numcols; j++)
    {
      if (mat[i][j] < minval[j])
        minval[j] = mat[i][j];
      if (mat[i][j] > maxval[j])
        maxval[j] = mat[i][j];
    }

  if (debug_output() && (pe == 0))
    log_printf("%d: after getting local ranges, minval = %g, maxval = %g\n",
               pe,minval[1],maxval[1]);
  /*
    print_row(ut_log_fp, numcols, minval);
    print_row(ut_log_fp, numcols, maxval);
    */

  if (debug_output() && (pe == 0))
    log_printf("%d: before message passing of ranges\n",pe);

  /* Pass minimum and maximum values in from each process to the controlling
     process */
  barrier();
  if (pe != 0) /* This is not the controlling process */
  {	
    /* Do the minimum value */
    cc = send_msg(&minval[1],numcols,0,pe,DA_FLOAT);

    if (debug_output())
      log_printf("%d: after sending local minvals\n",pe);

    /* Now block until receive broadcast message from the controlling
       process giving global minimum values */
    cc = recv_msg(&minval[1],numcols,0,0,DA_FLOAT);

    if (debug_output())
      log_printf("%d: after receiving global minvals, minval=%g, maxval=%g\n",
                 pe,minval[1],maxval[1]);
    /*
      log_printf("%d: minval\n",pe);
      print_row(ut_log_fp, numcols, minval);
      */

    /* Do the maximum value */
    cc = send_msg(&maxval[1],numcols,0,pe,DA_FLOAT);

    if (debug_output())
      log_printf("%d: after sending local maxvals\n",pe);
    
    /* Now block until receive broadcast message from the controlling
       process giving global maximum values */
    cc = recv_msg(&maxval[1],numcols,0,0,DA_FLOAT);

    if (debug_output())
      log_printf("%d: after receiving global maxvals, minval=%g, maxval=%g\n",
                 pe,minval[1],maxval[1]);
    /*
      log_printf("%d: maxval\n",pe);
      print_row(ut_log_fp, numcols, maxval);
      */

  }
  else /* This is the controlling process */
  {
    /* Now receive the minimum values from each PE */
    /*      time1 = time_now(); */
    for(p=1;p<numPE;p++)
    {
      cc = recv_msg(&otherminval[1],numcols,p,p,DA_FLOAT);

      if (debug_output())
        log_printf("%d: after receiving local minvals\n",pe);

      for(j=1; j<=numcols; j++)
        if (otherminval[j] < minval[j])
          minval[j] = otherminval[j];
    } 
    /* Now broadcast the global minimum values */
    cc = broadcast_msg(&minval[1],numcols,DA_ALL_PES,0,DA_FLOAT);

    if (debug_output())
      log_printf("%d: after broadcasting global minvals\n",pe);

    /* Now receive the maximum values from each PE */
    for(p=1;p<numPE;p++)
    {
      cc = recv_msg(&othermaxval[1],numcols,p,p,DA_FLOAT);

      if (debug_output())
        log_printf("%d: after receiving local maxvals\n",pe);
 
      for(j=1; j<=numcols; j++)
        if (othermaxval[j] > maxval[j])
          maxval[j] = othermaxval[j];
    }
    /* Now broadcast the global minimum values */
    cc = broadcast_msg(&maxval[1],numcols,DA_ALL_PES,0,DA_FLOAT);

    if (debug_output())
      log_printf("%d: after broadcasting global maxvals\n",pe);
    /* time2 = time_now(); */
    /* log_printf("%d: time to pass min/max values = %lf\n",pe,time2-time1); */
  }

  if (debug_output() && (pe == 0))
    log_printf("%d: after message passing of ranges\n",pe);

  if (debug_output())
    log_printf("%d: after message passing of ranges, minval=%g, maxval=%g\n",
               pe,minval[1],maxval[1]);
  /*
    log_printf("%d: minval, maxval\n",pe);
    print_row(ut_log_fp, numcols, minval);
    print_row(ut_log_fp, numcols, maxval);
    */

/*----------------------------------------------------------------------------*/
  /* finish normalizing */

  /* scale each attribute value by its range and translate by its minval */
  for (j=1; j<=numcols; j++)
    range[j] = maxval[j] - minval[j];

  for (i=1; i<=numrows; i++)
    for (j=1; j<=numcols; j++)
      mat[i][j] = (mat[i][j] - minval[j]) / range[j];
  
  /* free storage related to message passing */
  NR_free_vector(othermaxval, 1, numcols);
  NR_free_vector(otherminval, 1, numcols);

  if (debug_output() && (pe == 0))
    log_printf("%d: after finish normalizing\n",pe);

  return (UT_OK);
}

@


1.6
log
@changed to match changes in NR library
@
text
@d28 1
a28 1
static char rcsid[] = "$Id: da_signal_pp.c,v 1.5 1997/01/29 21:52:15 agray Exp granat $";
d32 3
a57 3

/* PVM library */
#include <pvm3.h>
@


1.5
log
@new formatting, cleaning up debugging output using ut_output.
@
text
@d28 1
a28 1
static char rcsid[] = "$Id: da_signal_pp.c,v 1.4 1996/10/31 02:20:44 agray Exp agray $";
d32 3
a65 1
#include "nrutil.h"
d93 2
a94 2
  otherminval = vector(1,numcols);
  othermaxval = vector(1,numcols);
d228 2
a229 2
  free_vector(othermaxval, 1, numcols);
  free_vector(otherminval, 1, numcols);
@


1.4
log
@renamed from "da_dist_pp" to "da_signal_pp";
changed .h and .c formats throughout library;
some reorganizing between modules;
@
text
@d28 1
a28 1
static char rcsid[] = "$Id: da_signal_pp.c,v 1.3 1996/09/23 22:45:54 agray Exp agray $";
d31 15
a45 10
 *$Log: da_signal_pp.c,v $
 *Revision 1.3  1996/09/23 22:45:54  agray
 *added pvm3.h inclusion.
 *
 *Revision 1.2  1996/09/13 01:23:02  agray
 *change name and comments for normalize_data_pp(). added some headers.
 *
 *Revision 1.1  1996/07/19 17:59:42  agray
 *Initial revision
 *
d57 2
d66 1
a66 1
#include "da_msg_pp.h"
d82 3
a84 2
int range_normalize_cols_pp(mat, minval, maxval, range, numrows, numcols, pe, 
                            numPE)
a85 8
    float **mat;
    float *minval;
    float *maxval;
    float *range;
    int numrows;
    int numcols;
    int pe;
    int numPE;
d87 2
a88 2
    int   i,j, p, cc;
    float *otherminval, *othermaxval;
d90 7
a96 3
    /* create storage for the passed min/max values */
    otherminval = vector(1,numcols);
    othermaxval = vector(1,numcols);
d98 1
a98 1
    /* for each attribute, find the min and max */
d100 77
a176 1
      minval[j] = maxval[j] = mat[1][j];
d178 2
a179 53
    for (i=2; i<=numrows; i++)
      for (j=1; j<=numcols; j++)
      {
        if (mat[i][j] < minval[j])
          minval[j] = mat[i][j];
        if (mat[i][j] > maxval[j])
          maxval[j] = mat[i][j];
      }

if (pe==0)
printf("%d: after getting local ranges, minval = %g, maxval = %g\n",pe,minval[1],maxval[1]);
/*
print_row(stdout, numcols, minval);
print_row(stdout, numcols, maxval);
*/

if (pe==0)
printf("%d: before message passing of ranges\n",pe);

    /* Pass minimum and maximum values in from each process to the controlling
       process */
    barrier();
    if (pe != 0) /* This is not the controlling process */
    {	
      /* Do the minimum value */
      cc = send_msg(&minval[1],numcols,0,pe,DA_FLOAT);

printf("%d: after sending local minvals\n",pe);

      /* Now block until receive broadcast message from the controlling
         process giving global minimum values */
      cc = recv_msg(&minval[1],numcols,0,0,DA_FLOAT);

printf("%d: after receiving global minvals, minval = %g, maxval = %g\n",pe,minval[1],maxval[1]);
/*
printf("%d: minval\n",pe);
print_row(stdout, numcols, minval);
*/

      /* Do the maximum value */
      cc = send_msg(&maxval[1],numcols,0,pe,DA_FLOAT);

printf("%d: after sending local maxvals\n",pe);

      /* Now block until receive broadcast message from the controlling
         process giving global maximum values */
      cc = recv_msg(&maxval[1],numcols,0,0,DA_FLOAT);

printf("%d: after receiving global maxvals, minval = %g, maxval = %g\n",pe,minval[1],maxval[1]);
/*
printf("%d: maxval\n",pe);
print_row(stdout, numcols, maxval);
*/
d181 2
a182 2
    }
    else /* This is the controlling process */
d184 1
a184 21
      /* Now receive the minimum values from each PE */
      /*      time1 = time_now(); */
      for(p=1;p<numPE;p++)
      {
        cc = recv_msg(&otherminval[1],numcols,p,p,DA_FLOAT);

printf("%d: after receiving local minvals\n",pe);

        for(j=1; j<=numcols; j++)
          if (otherminval[j] < minval[j])
             minval[j] = otherminval[j];
      } 
      /* Now broadcast the global minimum values */
      cc = broadcast_msg(&minval[1],numcols,DA_ALL_PES,0,DA_FLOAT);

printf("%d: after broadcasting global minvals\n",pe);

      /* Now receive the maximum values from each PE */
      for(p=1;p<numPE;p++)
      {
        cc = recv_msg(&othermaxval[1],numcols,p,p,DA_FLOAT);
d186 2
a187 1
printf("%d: after receiving local maxvals\n",pe);
d189 3
a191 11
        for(j=1; j<=numcols; j++)
          if (othermaxval[j] > maxval[j])
	    maxval[j] = othermaxval[j];
      }
      /* Now broadcast the global minimum values */
      cc = broadcast_msg(&maxval[1],numcols,DA_ALL_PES,0,DA_FLOAT);

printf("%d: after broadcasting global maxvals\n",pe);
      /*      time2 = time_now(); */
      /*      printf("%d: time to pass min/max values = %lf\n",pe,time2-time1);
       */
d193 2
d196 17
a212 2
if (pe==0)
printf("%d: after message passing of ranges\n",pe);
d214 2
a215 6
printf("%d: after message passing of ranges, minval = %g, maxval = %g\n",pe,minval[1],maxval[1]);
/*
printf("%d: minval, maxval\n",pe);
print_row(stdout, numcols, minval);
print_row(stdout, numcols, maxval);
*/
d217 3
a219 2
/*----------------------------------------------------------------------------*/
    /* finish normalizing */
d221 1
a221 1
    /* scale each attribute value by its range and translate by its minval */
d223 5
a227 9
      range[j] = maxval[j] - minval[j];

    for (i=1; i<=numrows; i++)
      for (j=1; j<=numcols; j++)
        mat[i][j] = (mat[i][j] - minval[j]) / range[j];

    /* free storage related to message passing */
    free_vector(othermaxval, 1, numcols);
    free_vector(otherminval, 1, numcols);
d229 2
a230 2
if (pe==0)
printf("%d: after finish normalizing\n",pe);
d232 1
a232 1
    return (UT_OK);
@


1.3
log
@added pvm3.h inclusion.
@
text
@d2 2
d5 2
a6 8
  Title:     da_dist_pp
  Author:    Alexander Gray
  Function:  Data analysis routines, Numerical Recipes style.
             This module contains parallel versions of some functions in the
             da_dist module.  Built using the PVM parallel programming library.
  Reference: -
  How used:  First use - in ~/unsup/sc/sc.c.
  Notes:     - 
d8 18
d28 1
a28 1
static char rcsid[] = "$Id: da_dist_pp.c,v 1.2 1996/09/13 01:23:02 agray Exp agray $";
d31 4
a34 1
 *$Log: da_dist_pp.c,v $
d43 1
d48 1
d51 1
d54 1
d58 1
d60 3
a62 1
#include "da_dist_pp.h"
d66 8
a73 7
 RANGE_NORMALIZE_COLS
 For each of k columns in a matrix, find the minimum and maximum values, and
 the range (difference between the two).  Pass in a size k vector for each of 
 these latter sets of values, and they will be filled in by this function.  
 Modifies the original matrix such that each value in each column is normalized
 ized by the range of that column.  Thus, all entries in the matrix will end up
 scaled from 0-1.  Does this in parallel.
@


1.2
log
@change name and comments for normalize_data_pp(). added some headers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Id: da_dist_pp.c,v 1.1 1996/07/19 17:59:42 agray Exp agray $";
d18 3
d29 2
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
static char rcsid[] = "$Id$";
d17 4
a20 1
 *$Log$
d26 7
d37 6
a42 6
 NORMALIZE_DATA_PP
 For each of k attributes in a matrix of data, find the minimum and maximum 
 values, and the range (difference between the two).  Pass in a size k vector
 for each of these, and they will be filled in by this function.  Also modifies
 the original data matrix such that each value in the dataset is normalized by
 the range, for each attribute.  Thus, all entries in the data matrix will 
d45 2
a46 1
int normalize_data_pp(data, minval, maxval, range, numrows, numcols, pe, numPE)
d48 1
a48 1
    float **data;
d57 2
a58 1
    int i,j;
d66 1
a66 1
      minval[j] = maxval[j] = data[1][j];
d71 4
a74 4
        if (data[i][j] < minval[j])
          minval[j] = data[i][j];
        if (data[i][j] > maxval[j])
          maxval[j] = data[i][j];
d181 1
a181 1
        data[i][j] = (data[i][j] - minval[j]) / range[j];
@
