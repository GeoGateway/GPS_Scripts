head	1.13;
access;
symbols;
locks
	granat:1.13; strict;
comment	@ * @;


1.13
date	97.09.10.14.51.36;	author granat;	state Exp;
branches;
next	1.12;

1.12
date	97.06.27.16.16.27;	author granat;	state Exp;
branches;
next	1.11;

1.11
date	97.06.26.15.19.37;	author granat;	state Exp;
branches;
next	1.10;

1.10
date	97.06.25.23.53.55;	author granat;	state Exp;
branches;
next	1.9;

1.9
date	97.06.24.23.29.49;	author granat;	state Exp;
branches;
next	1.8;

1.8
date	97.06.19.14.18.47;	author granat;	state Exp;
branches;
next	1.7;

1.7
date	97.01.29.21.44.36;	author agray;	state Exp;
branches;
next	1.6;

1.6
date	96.10.31.02.10.15;	author agray;	state Exp;
branches;
next	1.5;

1.5
date	96.10.31.01.23.51;	author agray;	state Exp;
branches;
next	1.4;

1.4
date	96.09.12.23.37.53;	author granat;	state Exp;
branches;
next	1.3;

1.3
date	96.07.17.20.44.52;	author agray;	state Exp;
branches;
next	1.2;

1.2
date	96.07.16.00.09.33;	author agray;	state Exp;
branches;
next	1.1;

1.1
date	96.07.11.18.13.17;	author agray;	state Exp;
branches;
next	;


desc
@Parallel message passing module.
@


1.13
log
@fixed some error handling
@
text
@/*******************************************************************************
MODULE NAME
da_comm_pp

ONE-LINE SYNOPSIS
Functions related to communication on parallel machines.

SCOPE OF THIS MODULE
This module is concerned only with a substrate of functions for parallel compu-
ting, not functions which actually perform parallel computations.  

SEE ALSO
Functions which perform parallel computations are contained in other modules, 
denoted by the "_pp" suffix.

REFERENCE(S)
-

PROGRAM EXAMPLE(S)
1. /proj/cooltools/sc_pp, AG.
2. /proj/cooltools/kmeans_pp, RG.

NOTES
-

AG
*******************************************************************************/
#ifndef lint
static char rcsid[] = "$Id: da_comm_pp.c,v 1.12 1997/06/27 16:16:27 granat Exp granat $";
#endif
/* This string variable allows the RCS identification info to be printed. */

/* 
 * $Log: da_comm_pp.c,v $
 * Revision 1.12  1997/06/27 16:16:27  granat
 * added dummy functions for non-parallel case
 *
 * Revision 1.11  1997/06/26 15:19:37  granat
 * cosmetic changes
 *
 * Revision 1.10  1997/06/25 23:53:55  granat
 * fixed error handling, added init, finalize, and barrier
 * fixed platform handling
 *
 * Revision 1.9  1997/06/24 23:29:49  granat
 * added mpi versions of functions, added recv_bcast_msg()
 *
 * Revision 1.8  1997/06/19 14:18:47  granat
 * Fixed bug in Cray version of broadcast_msg()
 *
 * Revision 1.7  1997/01/29 21:44:36  agray
 * new formatting, cleaning up debugging output using ut_output.
 *
 * Revision 1.6  1996/10/31 02:10:15  agray
 * renamed from "da_msg_pp" to "da_comm_pp";
 * changed .h and .c formats throughout library.
 *
 * Revision 1.5  1996/10/31 01:23:51  agray
 * consolidated functions for different platforms.
 *
 * Revision 1.4  1996/09/12 23:37:53  granat
 * Added functions convert_pe_to_tid and convert_tid_to_pe
 * Modified send_msg and receive_msg to work on the suns
 *
 * Revision 1.3  1996/07/17 20:44:52  agray
 * cosmetic.
 *
 * Revision 1.2  1996/07/16 00:09:33  agray
 * added get_pe_info_cray().
 *
 * Revision 1.1  1996/07/11 18:13:17  agray
 * Initial revision
 *
 * */

/* C library */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

/* DA library */
#include "da_platform.h"

/* MPI library */
#if (DA_MPI == DA_MPI_EXISTS)
#include "mpi.h"
#endif

/* PVM library */
#if (DA_PVM == DA_PVM_EXISTS)
#include "pvm3.h"
#endif

/* UT library */
#include "ut_types.h"
#include "ut_error.h"
#include "ut_output.h"

/* this module's header */
#include "da_comm_pp.h"


/*******************************************************************************
DA_INIT_PP
Initialize a parallel program.  This should be the first thing done in main.
The inputs should be the addresses of argc and argv that are the arguments to 
main.  This function should not be called more than once.
RG
*******************************************************************************/
#if (DA_MPI == DA_MPI_EXISTS)

int DA_init_pp( int *argc_p, char ***argv_p )
{
  int cc;

  cc = MPI_Init( argc_p, argv_p );

  if (cc == MPI_SUCCESS)
    return( UT_OK );
  else {
    err_printf();
    log_printf( "MPI_Init failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
}

#elif (DA_PVM == DA_PVM_EXISTS)
#if (DA_PVM_SPAWN == DA_AUTO_SPAWN)

int DA_init_pp( int *argc_p, char ***argv_p )
{
  /* In this case there is no need to do any real initialization */

  return( UT_OK );
}

#elif (DA_PVM_SPAWN == DA_MANUAL_SPAWN)

int DA_init_pp( int *argc_p, char ***argv_p )
{
  int  *tids;
  int  id;
  int  nprocs;
  int  cc;
  int  i, n;
  char *cp;

 /****
  * First parse the number of processes from the command line arguments. 
  * This is done here to avoid forcing the user to explicitly parse 
  * parallel arguments.
  ****/

  nprocs = 1;

  for (i = 1; i <= (*argc_p); i++)
    if ( !strcmp( (*argv_p)[i], "-npes" ) ) {
      cp = 0;
      n = strtol( (*argv_p)[i + 1], &cp, 10 );
      if ( cp == (*argv_p)[i + 1] ) {
        err_printf();
        log_printf( "Expecting an integer arg to -npes, not \"%s\"\n", 
                    (*argv_p)[i + 1] );
        return( UT_ERROR );
      }
      else if( cp && *cp ) {
        err_printf();
        log_printf( "Ignoring extra args to -npes\n" );
        return( UT_ERROR );
      }
      else if( n <= 0 ) {
        err_printf();
        log_printf( "-npes must be > 0, not %d\n", n );
        return( UT_ERROR );
      }
      else
        nprocs = n;

      memmove( *argv_p + i, *argv_p + i + 2, 
               (*argc_p - i - 1) * sizeof( char * ) ); 
      *argc_p -= 2;
    }

  /* now identify this process and join the group */

  id = pvm_joingroup( PVM_GROUP );
  if (id < PvmOk) {
    printf( "pvm_joingroup failed with error #%d.\n", id );
    return( UT_ERROR );
  }

  /* spawn the processes if this is the first process */

  if ( (id == 0) && (nprocs > 1) ) {
    tids = malloc( (nprocs - 1) * sizeof( int ) );
    cc = pvm_spawn( (*argv_p)[0], &(*argv_p)[1], PvmTaskDefault, 0, nprocs - 1,
                    tids );
    free( tids );
    if (cc < PvmOk) {
      err_printf();
      log_printf( "Error in pvm_spawn (%d)\n", cc );
      return( UT_ERROR );
    }
    else if (cc < (nprocs - 1)) {
      err_printf();
      log_printf( "Insufficient processes (%d) spawned\n", cc );
      return( UT_ERROR );
    }
    else if (cc > (nprocs - 1)) {
      err_printf();
      log_printf( "Too many processes (%d) spawned\n", cc );
      return( UT_ERROR );
    }
  }

  return( UT_OK );
} 

#endif
#else /* No parallel library available */

int DA_init_pp( int *argc_p, char ***argv_p )
{
  return( UT_OK );
}

#endif

/*******************************************************************************
DA_FINALIZE_PP
Clean up after a parallel program.  This should be the last function called
before main returns.
RG
*******************************************************************************/

#if (DA_MPI == DA_MPI_EXISTS)

int DA_finalize_pp()
{
  int cc;

  cc = MPI_Finalize();

  if (cc == MPI_SUCCESS)
    return( UT_OK );
  else {
    err_printf();
    log_printf( "MPI_finalize failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
}

#elif (DA_PVM == DA_PVM_EXISTS)

int DA_finalize_pp()
{
  int cc;

  cc = pvm_exit();

  if (cc < PvmOk) {
    err_printf();
    log_printf( "pvm_exit failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
  else
    return( UT_OK );
}

#else /* No parallel library available */

int DA_finalize_pp()
{
  return( UT_OK );
}

#endif

/*******************************************************************************
DA_BARRIER
Synchronize parallel processes.
RG
*******************************************************************************/

#if (DA_MPI == DA_MPI_EXISTS)

int DA_barrier()
{
  int cc;

  cc = MPI_Barrier( MPI_COMM_WORLD );

  if (cc == MPI_SUCCESS)
    return( UT_OK );
  else {
    err_printf();
    log_printf( "MPI_Barrier failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
}

#elif (DA_PVM == DA_PVM_EXISTS)

int DA_barrier()
{
  int cc;
  int nprocs;

  nprocs = pvm_gsize( PVM_GROUP );

  if (nprocs < PvmOk) {
    err_printf();
    log_printf( "pvm_gsize failed with error #%d.\n", nprocs );
    return( UT_ERROR );
  }

  cc = pvm_barrier( PVM_GROUP, nprocs );

  if (cc < PvmOk) {
    err_printf();
    log_printf( "pvm_barrier failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
  else
    return( UT_OK );
} 

#else /* No parallel library available */

int DA_barrier()
{
  return( UT_OK );
}

#endif
    
/*******************************************************************************
DA_GET_PE_INFO
Get the virtual process number and the number of processes
AG, RG
*******************************************************************************/
#if (DA_MPI == DA_MPI_EXISTS)

int DA_get_pe_info( int *pe, int *numPE )
{
  int cc;

  cc = MPI_Comm_rank( MPI_COMM_WORLD, pe); 

  if (cc != MPI_SUCCESS) {
    err_printf();
    log_printf( "MPI_Comm_rank failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
 
  cc = MPI_Comm_size( MPI_COMM_WORLD, numPE); 

  if (cc == MPI_SUCCESS)
    return( UT_OK );
  else {
    err_printf();
    log_printf( "MPI_Comm_size failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
}

#elif (DA_PVM == DA_PVM_EXISTS)
#if (DA_PVM_TID == DA_PE_ALIAS)

int DA_get_pe_info( int *pe, int *numPE )
{
  int pvm_tid;

  pvm_tid = pvm_mytid();     /*Find out which process number*/

  if (pvm_tid < PvmOk) {
    err_printf();
    log_printf( "pvm_mytid failed with error #%d.\n", pmv_tid );
    return( UT_ERROR );
  }

  *pe = pvm_get_PE( pvm_tid ); /*Get the virtual PE number*/

  if (*pe < PvmOk) {
    err_printf();
    log_printf( "pvm_get_PE faled with error #%d.\n", *pe );
    return( UT_ERROR );
  }

  *numPE = pvm_gsize( 0 );     /*Do the head count*/

  if (*numPE < PvmOk) {
    err_printf();
    log_printf( "pvm_gsize failed with error #%d.\n", *numPE );
    return( UT_ERROR );
  } 
  else
    return(UT_OK);
}

#elif (DA_PVM_TID == DA_NO_PE_ALIAS)

int DA_get_pe_info( int *pe, int *numPE )
{
  int pvm_tid;

  pvm_tid = pvm_mytid();

  if (pvm_tid < PvmOk) {
    err_printf();
    log_printf( "pvm_mytid failed with error #%d.\n", pvm_tid );
    return( UT_ERROR );
  }

  *pe = pvm_getinst( PVM_GROUP, pvm_tid );
 
  if (*pe < PvmOk) {
    err_printf();
    log_printf( "pvm_getinst failed with error #%d.\n", *pe );
    return( UT_ERROR );
  }

  *numPE = pvm_gsize( PVM_GROUP );     /*Do the head count*/

  if (*numPE < PvmOk) {
    err_printf();
    log_printf( "pvm_gsize failed with error #%d.\n", *numPE );
    return( UT_ERROR ); 
  }
  else
    return(UT_OK);
}

#endif
#else /* No parallel library available */

int DA_get_pe_info( int *pe, int *numPE )
{
  *pe = 0;
  *numPE = 1;

  return( UT_OK );
}

#endif

/*******************************************************************************
DA_CONVERT_PE_TO_TID
Convert the processing element number to the arbitrary pvm tid number of that
process.
AG, RG
*******************************************************************************/

#if ((DA_MPI == DA_NO_MPI) && (DA_PVM == DA_PVM_EXISTS))

int DA_convert_pe_to_tid( int pe )
{
  int tid = pvm_gettid( PVM_GROUP, pe );

  if (tid < PvmOk) {
    err_printf();
    log_printf( "pvm_gettid failed with error #%d.\n", tid );
    return( UT_ERROR );
  }

  return( tid );
}

#endif

/*******************************************************************************
DA_CONVERT_TID_TO_PE
Convert the arbitrary tid number of a process to the processing element number.
AG, RG
*******************************************************************************/

#if ((DA_MPI == DA_NO_MPI) && (DA_PVM == DA_PVM_EXISTS))

int DA_convert_tid_to_pe ( int tid )
{
  int pe = pvm_getinst( PVM_GROUP, tid );

  if (pe < PvmOk) {
    err_printf();
    log_printf( "pvm_getinst failed with error #%d.\n", pe );
    return( UT_ERROR );
  }

  return( pe );
}

#endif

/*******************************************************************************
DA_SEND_MSG
Send a message to another processor.
AG, RG
*******************************************************************************/

#if (DA_MPI == DA_MPI_EXISTS)

int DA_send_msg( void *data, int length, int target_pe, int msgtag, 
                 char datatype)
 
{
  int cc;
 
  switch(datatype)
  {
    case DA_INT:
      cc =
       MPI_Send(data, length, MPI_INT, target_pe, msgtag, MPI_COMM_WORLD);
      break;
    case DA_FLOAT:
      cc =
        MPI_Send(data, length, MPI_FLOAT, target_pe, msgtag, MPI_COMM_WORLD);
      break;
    case DA_DOUBLE:
      cc =
        MPI_Send(data, length, MPI_DOUBLE, target_pe, msgtag, MPI_COMM_WORLD);
      break;
    default:
      err_printf();
      log_printf("bad data type passed to send_msg.\n");
      return (UT_ERROR);
  }
  if (cc != MPI_SUCCESS) {
    err_printf();
    log_printf("mpi_send failed with error #%d.\n",cc);
    return( UT_ERROR );
  }
  else
    return( UT_OK );
}

#elif (DA_PVM == DA_PVM_EXISTS)
#if (DA_PVM_TID == DA_PE_ALIAS)

int DA_send_msg( void *data, int length, int target_pe, int msgtag, 
                 char datatype)

{
  int cc;
  int stride = 1;

  cc = pvm_initsend(PvmDataRaw);
  if (cc < PvmOk)
  {
    err_printf();
    log_printf("pvm_initsend failed with error #%d.\n",cc);
    return cc;
  }
  else
  {
    switch(datatype)
    {
      case DA_INT:
        cc = pvm_pkint((int*)data,length,stride);
        break;
      case DA_FLOAT:
        cc = pvm_pkfloat((float*)data,length,stride);
        break;
      case DA_DOUBLE:
        cc = pvm_pkdouble((double*)data,length,stride);
        break;
      default:
        err_printf();
        log_printf("bad data type passed to send_msg.\n");
        return (UT_ERROR); 
        /* should make pvm error codes correspond with UT */
    }
    if (cc < PvmOk)
    {
      err_printf();
      log_printf("pvm packing function failed with error #%d.\n",cc);
      return cc;
    }
    else
    {
      cc = pvm_send(target_pe,msgtag);
      if (cc < PvmOk)
      {
        err_printf();
        log_printf("pvm_send failed with error #%d.\n",cc);
        return cc;
      }
    }
  }
}

#elif (DA_PVM_TID == DA_NO_PE_ALIAS)

int DA_send_msg( void *data, int length, int target_pe, int msgtag, 
                 char datatype)
 
{
  int cc;
  int stride = 1;
 
  cc = pvm_initsend(PvmDataRaw);
  if (cc < PvmOk)
  {
    err_printf();
    log_printf("pvm_initsend failed with error #%d.\n",cc);
    return cc;
  }
  else
  {
    switch(datatype)
    {
      case DA_INT:
        cc = pvm_pkint((int*)data,length,stride);
        break;
      case DA_FLOAT:
        cc = pvm_pkfloat((float*)data,length,stride);
        break;
      case DA_DOUBLE:
        cc = pvm_pkdouble((double*)data,length,stride);
        break;
      default:
        log_printf("bad data type passed to send_msg.\n");
        return (UT_ERROR);
        /* should make pvm error codes correspond with UT */
    }
    if (cc < PvmOk)
    {
      err_printf();
      log_printf("pvm packing function failed with error #%d.\n",cc);
      return cc;
    }
    else
    {
      cc = pvm_send(convert_pe_to_tid(target_pe),msgtag);
      if (cc < PvmOk)
      {
        err_printf();
        log_printf("pvm_send failed with error #%d.\n",cc);
        return cc;
      }
    }
  }
}

#endif
#else /* No parallel library available */

int DA_send_msg( void *data, int length, int target_pe, int msgtag,
                 char datatype)
{
  return( UT_OK );
}

#endif

/*******************************************************************************
DA_RECV_MSG
Receive a message from another processor.
AG, RG
*******************************************************************************/

#if (DA_MPI == DA_MPI_EXISTS)

int DA_recv_msg( void *data, int length, int sending_pe, int msgtag,
                 char datatype)
 
{
  int cc;
  MPI_Status status;
 
  switch(datatype)
  {
    case DA_INT:
      cc = MPI_Recv( data, length, MPI_INT, sending_pe, msgtag,
                     MPI_COMM_WORLD, &status);
      break;
    case DA_FLOAT:
      cc = MPI_Recv( data, length, MPI_FLOAT, sending_pe, msgtag,
                     MPI_COMM_WORLD, &status);
      break;
    case DA_DOUBLE:
      cc = MPI_Recv( data, length, MPI_DOUBLE, sending_pe, msgtag,
                     MPI_COMM_WORLD, &status);
      break;
    default:
      err_printf();
      log_printf("bad data type passed to recv_msg.\n");
      return (UT_ERROR); /* should make pvm error codes correspond with UT */
  }
  if (cc != MPI_SUCCESS) {
    err_printf();
    log_printf("mpi_recv failed with error #%d.\n",cc);
    return UT_ERROR;
  }
  else
    return UT_OK;
}

#elif (DA_PVM == DA_PVM_EXISTS)
#if (DA_PVM_TID == DA_PE_ALIAS)

int DA_recv_msg( void *data, int length, int sending_pe, int msgtag, 
                 char datatype)

{
  int cc, buf, stride = 1;

  buf = pvm_recv(sending_pe,msgtag);
  switch(datatype)
  {
    case DA_INT:
      cc = pvm_upkint((int*)data,length,stride);
      break;
    case DA_FLOAT:
      cc = pvm_upkfloat((float*)data,length,stride);
      break;
    case DA_DOUBLE:
      cc = pvm_upkdouble((double*)data,length,stride);
      break;
    default:
      err_printf();
      log_printf("bad data type passed to recv_msg.\n");
      return (UT_ERROR); /* should make pvm error codes correspond with UT */
  }
  if (cc < PvmOk)
  {
    err_printf();
    log_printf("pvm unpacking function failed with error #%d.\n",cc);
    return cc;
  }
  else
  {
    cc = pvm_freebuf(buf);
    if (cc < PvmOk)
    {
      err_printf();
      log_printf("pvm_freebuf failed with error #%d.\n",cc);
      return cc;
    }
  }
}

#elif (DA_PVM_TID == DA_NO_PE_ALIAS)

int DA_recv_msg( void *data, int length, int sending_pe, int msgtag,
                 char datatype)
 
{
  int cc, buf, stride = 1;
 
  buf = pvm_recv(convert_pe_to_tid(sending_pe),msgtag);
  switch(datatype)
  {
    case DA_INT:
      cc = pvm_upkint((int*)data,length,stride);
      break;
    case DA_FLOAT:
      cc = pvm_upkfloat((float*)data,length,stride);
      break;
    case DA_DOUBLE:
      cc = pvm_upkdouble((double*)data,length,stride);
      break;
    default:
      err_printf();
      log_printf("bad data type passed to recv_msg.\n");
      return (UT_ERROR); /* should make pvm error codes correspond with UT */
  }
  if (cc < PvmOk)
  {
    err_printf();
    log_printf("pvm unpacking function failed with error #%d.\n",cc);
    return cc;
  }
  else
  {
    cc = pvm_freebuf(buf);
    if (cc < PvmOk)
    {
      err_printf();
      log_printf("pvm_freebuf failed with error #%d.\n",cc);
      return cc;
    }
  }
}

#endif
#else /* No parallel library available */

int DA_recv_msg( void *data, int length, int sending_pe, int msgtag,
                 char datatype)
{
  return( UT_OK );
}

#endif

/*******************************************************************************
DA_BROADCAST_MSG
Broadcast a message to a group of processors.
AG, RG
*******************************************************************************/

#if (DA_MPI == DA_MPI_EXISTS)

int DA_broadcast_msg( void *data, int length, char *target_group, int msgtag,
                      char datatype)
{
  int cc;
  int root;

  cc = MPI_Comm_rank( MPI_COMM_WORLD, &root );

  if (cc != MPI_SUCCESS) {
    err_printf();
    log_printf( "MPI_Comm_rank failed with error #%d.\n", cc );
    return( UT_ERROR );
  }
 
  switch(datatype)
  {
    case DA_INT:
      cc = MPI_Bcast( data, length, MPI_INT, root, MPI_COMM_WORLD );
      break;
    case DA_FLOAT:
      cc = MPI_Bcast( data, length, MPI_FLOAT, root, MPI_COMM_WORLD );
      break;
    case DA_DOUBLE:
      cc = MPI_Bcast( data, length, MPI_DOUBLE, root, MPI_COMM_WORLD );
      break;
    default:
      log_printf("bad data type passed to broadcast_msg.\n");
      return (UT_ERROR); /* should make pvm error codes correspond with UT */
  }
  if (cc != MPI_SUCCESS) {
    err_printf();
    log_printf("mpi_bcast failed with error #%d.\n",cc);
    return UT_ERROR;
  }
  else
    return UT_OK;
}

#elif (DA_PVM == DA_PVM_EXISTS)

int DA_broadcast_msg( void *data, int length, char *target_group, int msgtag, 
                      char datatype)

{
  int cc, stride = 1;

  cc = pvm_initsend(PvmDataRaw);

  if (cc < PvmOk) {
    err_printf();
    log_printf( "pvm_initsend failed with error #%d.\n", cc );
    return( UT_ERROR );
  }

  switch(datatype)
  {
    case DA_INT:
      cc = pvm_pkint((int*)data,length,stride);
      break;
    case DA_FLOAT:
      cc = pvm_pkfloat((float*)data,length,stride);
      break;
    case DA_DOUBLE:
      cc = pvm_pkdouble((double*)data,length,stride);
      break;
    default:
      err_printf();
      log_printf("bad data type passed to broadcast_msg.\n");
      return (UT_ERROR); /* should make pvm error codes correspond with UT */
  }
  if (cc < PvmOk)
  {
    err_printf();
    log_printf("pvm packing function failed with error #%d.\n",cc);
    return( UT_ERROR );
  }
  else
  {
    cc = pvm_bcast(target_group,msgtag);
    if (cc < PvmOk)
    {
      err_printf();
      log_printf("pvm_bcast failed with error #%d.\n",cc);
      return( UT_ERROR );
    }
  }

  return( UT_OK );
}

#else /* No parallel library available */

int DA_broadcast_msg( void *data, int length, char *target_group, int msgtag,
                      char datatype)
{
  return( UT_OK );
}

#endif

/*******************************************************************************
DA_RECV_BCAST_MSG
Receive a message that was broadcast to a group of processors.
RG
*******************************************************************************/

#if (DA_MPI == DA_MPI_EXISTS)

int DA_recv_bcast_msg( void *data, int length, int sending_pe, int msgtag,
                       char datatype )
{
  int cc;
 
  switch(datatype)
  {
    case DA_INT:
      cc = MPI_Bcast( data, length, MPI_INT, sending_pe, MPI_COMM_WORLD );
      break;
    case DA_FLOAT:
      cc = MPI_Bcast( data, length, MPI_FLOAT, sending_pe, MPI_COMM_WORLD );
      break;
    case DA_DOUBLE:
      cc = MPI_Bcast( data, length, MPI_DOUBLE, sending_pe, MPI_COMM_WORLD );
      break;
    default:
      err_printf();
      log_printf("bad data type passed to broadcast_msg.\n");
      return( UT_ERROR ); /* should make pvm error codes correspond with UT */
  }
  if (cc != MPI_SUCCESS) {    
    err_printf();
    log_printf("mpi_bcast failed with error #%d.\n",cc);
    return( UT_ERROR );
  }
  else
    return( UT_OK );
}

#elif (DA_PVM == DA_PVM_EXISTS)

int DA_recv_bcast_msg( void *data, int length, int sending_pe, int msgtag,
                       char datatype )
{
  return( DA_recv_msg( data, length, sending_pe, msgtag, datatype ) );
}

#else /* No parallel library available */

int DA_recv_bcast_msg( void *data, int length, int sending_pe, int msgtag,
                       char datatype )
{
  return( UT_OK );
}

#endif
@


1.12
log
@added dummy functions for non-parallel case
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.11 1997/06/26 15:19:37 granat Exp granat $";
d35 3
d122 2
a123 1
    printf( "MPI_Init failed with error #%d.\n", cc );
d345 1
a345 1
int DA_get_pid_info( int *pe, int *numPE )
d371 1
a371 1
int DA_get_pid_info( int *pe, int *numPE )
d404 1
a404 1
int DA_get_pid_info( int *pe, int *numPE )
d438 1
a438 1
int DA_get_pid_info( int *pe, int *numPE )
@


1.11
log
@cosmetic changes
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.10 1997/06/25 23:53:55 granat Exp granat $";
d35 3
a78 5
/* UT library */
#include "ut_types.h"
#include "ut_error.h"
#include "ut_output.h"

d82 5
d89 1
a89 1
#include <pvm3.h>
d92 4
a95 4
/* MPI library */
#if (DA_MPI == DA_MPI_EXISTS)
#include "mpi.h"
#endif
d217 7
d239 1
a239 1
  cc = MPI_finalize();
d267 7
d325 7
d432 10
d450 2
a451 1
#if (DA_PVM_TID == DA_NO_PE_ALIAS)
d473 2
a474 1
#if (DA_PVM_TID == DA_NO_PE_ALIAS)
d642 8
d783 8
d891 8
d945 8
@


1.10
log
@fixed error handling, added init, finalize, and barrier
fixed platform handling
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.9 1997/06/24 23:29:49 granat Exp granat $";
d35 4
d116 1
a116 1
    printf( "Error in MPI_Init (%d)\n", cc );
d182 1
a182 1
    printf( "Error in pvm_joingroup (%d)\n", id );
d235 1
a235 1
    log_printf( "Error in MPI_finalize (%d)\n", cc );
d250 1
a250 1
    log_printf( "Error in pvm_exit (%d)\n", cc );
d277 1
a277 1
    log_printf( "Error in MPI_Barrier (%d)\n", cc );
d293 1
a293 1
    log_printf( "Error in pvm_gsize (%d)\n", nprocs );
d301 1
a301 1
    log_printf( "Error in pvm_barrier (%d)\n", cc );
d325 1
a325 1
    log_printf( "Error in MPI_Comm_rank (%d)\n", cc );
d335 1
a335 1
    log_printf( "Error in MPI_Comm_size (%d)\n", cc );
d351 1
a351 1
    log_printf( "Error in pvm_mytid (%d)\n", pmv_tid );
d359 1
a359 1
    log_printf( "Error in pvm_get_PE (%d)\n", *pe );
d367 1
a367 1
    log_printf( "Error in pvm_gsize (%d)\n", *numPE );
d384 1
a384 1
    log_printf( "Error in pvm_mytid (%d)\n", pvm_tid );
d392 1
a392 1
    log_printf( "Error in pvm_getinst (%d)\n", *pe );
d400 1
a400 1
    log_printf( "Error in pvm_gsize (%d)\n", *numPE );
d421 7
d443 7
@


1.9
log
@added mpi versions of functions, added recv_bcast_msg()
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.8 1997/06/19 14:18:47 granat Exp granat $";
d35 3
d70 9
d81 1
a81 1
#ifdef DA_PVM
d86 1
a86 1
#ifdef DA_MPI
d90 196
a285 4
/* UT library */
#include "ut_types.h"
#include "ut_error.h"
#include "ut_output.h"
d287 5
a291 2
/* DA library */
#include "da_platform.h"
d293 1
a293 2
/* this module's header */
#include "da_comm_pp.h"
d295 8
d304 2
d307 1
a307 1
GET_PE_INFO
d311 1
a311 1
#ifdef DA_MPI
d313 1
a313 1
int get_pid_info(int *pe, int *numPE)
d315 9
a323 1
  MPI_Comm_rank( MPI_COMM_WORLD, pe); 
d325 1
a325 1
  MPI_Comm_size( MPI_COMM_WORLD, numPE); 
d327 7
a333 1
  return(UT_OK);
d336 2
a337 2
#elif DA_PVM
#ifdef DA_PVM_TID
d339 1
a339 1
int get_pid_info(int *pe, int *numPE)
d345 6
d352 7
d361 7
a367 1
  return(UT_OK);
d370 1
a370 1
#else
d372 1
a372 1
int get_pid_info(int *pe, int *numPE)
d378 6
d385 7
d394 7
a400 1
  return(UT_OK);
d407 1
a407 1
CONVERT_PE_TO_TID
d412 1
a412 1
#ifndef DA_PVM_TID
d414 1
a414 1
int convert_pe_to_tid( int pe )
d423 1
a423 1
CONVERT_TID_TO_PE
d427 1
a427 1
#ifndef DA_PVM_TID
d429 1
a429 1
int convert_tid_to_pe (int tid )
d438 1
a438 1
SEND_MSG
d442 5
a446 2
#ifdef DA_MPI
int send_msg(void *data, int length, int target_pe, int msgtag, char datatype)
d466 1
a468 1
      /* should make pvm error codes correspond with UT */
d470 2
a471 1
  if (cc != MPI_SUCCESS)
d473 4
a476 1
  return cc;
d479 2
a480 2
#elif DA_PVM
#ifdef DA_PVM_TID
d482 2
a483 1
int send_msg(void *data, int length, int target_pe, int msgtag, char datatype)
d490 1
a490 1
  if (cc < 0)
d492 1
d510 1
d515 1
a515 1
    if (cc < 0)
d517 1
d524 1
a524 1
      if (cc < 0)
d526 1
d534 1
a534 1
#else
d536 2
a537 1
int send_msg(void *data, int length, int target_pe, int msgtag, char datatype)
d544 1
a544 1
  if (cc < 0)
d546 1
d568 1
a568 1
    if (cc < 0)
d570 1
d577 1
a577 1
      if (cc < 0)
d579 1
d591 1
a591 1
RECV_MSG
d596 1
a596 1
#ifdef DA_MPI
d598 2
a599 2
int recv_msg(void *data, int length, int sending_pe, int msgtag,
             char datatype)
d620 1
d625 1
d633 2
a634 2
#elif DA_PVM
#ifdef DA_PVM_TID
d636 2
a637 2
int recv_msg(void *data, int length, int sending_pe, int msgtag, 
             char datatype)
d655 1
d659 1
a659 1
  if (cc < 0)
d661 1
d668 1
a668 1
    if (cc < 0)
d670 1
d677 1
a677 1
#else
d679 2
a680 2
int recv_msg(void *data, int length, int sending_pe, int msgtag,
             char datatype)
d698 1
d702 1
a702 1
  if (cc < 0)
d704 1
d711 1
a711 1
    if (cc < 0)
d713 1
d724 1
a724 1
BROADCAST_MSG
d729 1
a729 1
#ifdef DA_MPI
d731 2
a732 2
int broadcast_msg(void *data, int length, char *target_group, int msgtag,
                  char datatype)
d737 7
a743 1
  MPI_Comm_rank( MPI_COMM_WORLD, &root );
d761 1
d769 1
a769 1
#else
d771 2
a772 2
int broadcast_msg(void *data, int length, char *target_group, int msgtag, 
                  char datatype)
d778 7
d797 1
d801 1
a801 1
  if (cc < 0)
d803 1
d805 1
a805 1
    return cc;
d810 1
a810 1
    if (cc != 0)
d812 1
d814 1
a814 1
      return cc;
d817 2
d824 1
a824 1
RECV_BCAST_MSG
d829 1
a829 1
#ifdef DA_MPI
d831 2
a832 2
int recv_bcast_msg( void *data, int length, int sending_pe, int_msgtag,
                    char datatype )
d848 1
d850 1
a850 1
      return (UT_ERROR); /* should make pvm error codes correspond with UT */
d853 1
d855 1
a855 1
    return UT_ERROR;
d858 1
a858 1
    return UT_OK;
d861 1
a861 1
#elif DA_PVM
d863 2
a864 2
int recv_bcast_msg( void *data, int length, int sending_pe, int_msgtag,
                    char datatype )
d866 1
a866 1
  return( recv_msg( data, lenght, sending_pe, msgtag, datatype );
@


1.8
log
@Fixed bug in Cray version of broadcast_msg()
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.7 1997/01/29 21:44:36 agray Exp granat $";
d35 3
d69 1
d71 6
d93 1
a93 1
AG
d95 14
a108 1
#ifdef DA_CRAY
d121 2
a122 1
#else DA_UNIX
d136 1
d142 1
a142 1
AG
d144 2
d152 2
d157 1
a157 1
AG
d159 2
d167 2
d172 1
a172 1
AG
d174 32
a205 1
#ifdef DA_CRAY
d254 1
a254 1
#else DA_UNIX
d304 1
d309 1
a309 1
AG
d312 37
a348 1
#ifdef DA_CRAY
d388 1
a388 1
#else DA_UNIX
d429 1
d434 1
a434 1
AG
d436 36
d494 1
a494 5
  cc = pvm_bcast(target_group,msgtag);

  /*
  cc = pvm_initsend(PvmDataRaw);
  if (cc != 0)
d496 1
a496 1
    log_printf("pvm_initsend failed with error #%d.\n",cc);
d501 1
a501 17
    switch(datatype)
    {
      case DA_INT:
        cc = pvm_pkint((int*)data,length,stride);
        break;
      case DA_FLOAT:
        cc = pvm_pkfloat((float*)data,length,stride);
        break;
      case DA_DOUBLE:
        cc = pvm_pkdouble((double*)data,length,stride);
        break;
      default:
        log_printf("bad data type passed to broadcast_msg.\n");
        return (UT_ERROR);
        */ /* should make pvm error codes correspond with UT */
  /*
    }
d504 1
a504 1
      log_printf("pvm packing function failed with error #%d.\n",cc);
a506 9
    else
    {
      cc = pvm_bcast(target_group,msgtag);
      if (cc != 0)
      {
        log_printf("pvm_bcast failed with error #%d.\n",cc);
        return cc;
      }
    }
a507 1
  */
d510 2
d513 3
a515 4
VERIFY_RECV_MSG
Verify that a particular message was received from another processor; don't
need to unpack it.
AG
a516 1
int verify_recv_msg(int sending_pe, int msgtag)
d518 4
d523 3
a525 5
  int cc, buf;

  buf = pvm_recv(sending_pe,msgtag);
  cc = pvm_freebuf(buf);
  if (cc != 0)
d527 16
a542 2
    log_printf("pvm_freebuf failed with error #%d.\n",cc);
    return cc;
d544 2
d548 1
d550 5
d556 1
a556 1

@


1.7
log
@new formatting, cleaning up debugging output using ut_output.
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.6 1996/10/31 02:10:15 agray Exp agray $";
d35 3
d93 1
a93 1
  *numPE = pvm_gsize( PVM_GROUP );     /*Do the head count*/
@


1.6
log
@renamed from "da_msg_pp" to "da_comm_pp";
changed .h and .c formats throughout library.
@
text
@d29 1
a29 1
static char rcsid[] = "$Id: da_comm_pp.c,v 1.5 1996/10/31 01:23:51 agray Exp agray $";
d31 2
d34 7
a40 3
 *$Log: da_comm_pp.c,v $
 *Revision 1.5  1996/10/31 01:23:51  agray
 *consolidated functions for different platforms.
d42 3
a44 3
 *Revision 1.4  1996/09/12 23:37:53  granat
 *Added functions convert_pe_to_tid and convert_tid_to_pe
 *Modified send_msg and receive_msg to work on the suns
d46 2
a47 2
 *Revision 1.3  1996/07/17 20:44:52  agray
 *cosmetic.
d49 2
a50 2
 *Revision 1.2  1996/07/16 00:09:33  agray
 *added get_pe_info_cray().
d52 2
a53 2
 *Revision 1.1  1996/07/11 18:13:17  agray
 *Initial revision
d67 5
d82 1
a82 1
#ifdef CRAY
d95 1
a95 1
#elseif SUN
d138 1
a138 1
#ifdef CRAY
d149 1
a149 1
    printf("pvm_initsend failed with error #%d.\n",cc);
d166 1
a166 1
        printf("bad data type passed to send_msg.\n");
d172 1
a172 1
      printf("pvm packing function failed with error #%d.\n",cc);
d180 1
a180 1
        printf("pvm_send failed with error #%d.\n",cc);
d187 1
a187 1
#else SUN
d198 1
a198 1
    printf("pvm_initsend failed with error #%d.\n",cc);
d215 1
a215 1
        printf("bad data type passed to send_msg.\n");
d221 1
a221 1
      printf("pvm packing function failed with error #%d.\n",cc);
d229 1
a229 1
        printf("pvm_send failed with error #%d.\n",cc);
d244 1
a244 1
#ifdef CRAY
d265 1
a265 1
      printf("bad data type passed to recv_msg.\n");
d270 1
a270 1
    printf("pvm unpacking function failed with error #%d.\n",cc);
d278 1
a278 1
      printf("pvm_freebuf failed with error #%d.\n",cc);
d284 1
a284 1
#else SUN
d305 1
a305 1
      printf("bad data type passed to recv_msg.\n");
d310 1
a310 1
    printf("pvm unpacking function failed with error #%d.\n",cc);
d318 1
a318 1
      printf("pvm_freebuf failed with error #%d.\n",cc);
d350 1
a350 1
      printf("bad data type passed to broadcast_msg.\n");
d359 1
a359 1
    printf("pvm_initsend failed with error #%d.\n",cc);
d376 1
a376 1
        printf("bad data type passed to broadcast_msg.\n");
d383 1
a383 1
      printf("pvm packing function failed with error #%d.\n",cc);
d391 1
a391 1
        printf("pvm_bcast failed with error #%d.\n",cc);
d414 1
a414 1
    printf("pvm_freebuf failed with error #%d.\n",cc);
@


1.5
log
@consolidated functions for different platforms.
@
text
@d2 2
d5 2
a6 9
  Title:     da_msg_pp
  Author:    Alexander Gray, Robert Granat
  Function:  Data analysis routines, Numerical Recipes style, using the PVM
             parallel programming library.
             This file contains functions useful for message-passing and other
             basic parallel operations.
  Reference: -
  How used:  First use - in parallelized k-means and em code.
  Notes:     - 
d8 19
d29 1
a29 1
static char rcsid[] = "$Id: da_msg_pp.c,v 1.4 1996/09/12 23:37:53 granat Exp granat $";
d32 4
a35 1
 *$Log: da_msg_pp.c,v $
d51 1
d56 1
d59 1
d62 2
a63 1
#include "da_msg_pp.h"
d67 3
a69 2
 GET_PE_INFO
 Get the virtual process number and the number of processes
d100 4
a103 3
 CONVERT_PE_TO_TID
 Convert the processing element number to the arbitrary pvm tid number of that
 process.
d112 3
a114 2
 CONVERT_TID_TO_PE
 Convert the arbitrary tid number of a process to the processing element number.
d123 3
a125 2
 SEND_MSG
 Send a message to another processor.
d228 3
a230 2
 RECV_MSG
 Receive a message from another processor.
d316 3
a318 2
 BROADCAST_MSG
 Broadcast a message to a group of processors.
d389 4
a392 3
 VERIFY_RECV_MSG
 Verify that a particular message was received from another processor; don't
 need to unpack it.
@


1.4
log
@Added functions convert_pe_to_tid and convert_tid_to_pe
Modified send_msg and receive_msg to work on the suns
@
text
@d15 1
a15 1
static char rcsid[] = "$Id: da_msg_pp.c,v 1.3 1996/07/17 20:44:52 agray Exp granat $";
d19 4
d46 2
a47 2
 GET_PE_INFO_CRAY
 Get the virtual PE number and the number of PE's, on the Cray.
d49 2
a50 2
int get_pe_info_cray(int *pe, int *numPE)

d56 2
a57 2
  *pe = pvm_get_PE(pvm_tid); /*Get the virtual PE number*/
  *numPE = pvm_gsize(0);     /*Do the head count*/
d62 6
d69 2
a70 5
/*******************************************************************************
 GET_PE_INFO_SUNS
 Get the virtual PE number and the number of PE's, on a farm of Sun's.
*******************************************************************************/
int get_pe_info_suns(int *pe, int *numPE)
d72 1
a72 2
{
  /* not implemented yet */
d75 2
d111 1
a111 1
  if (cc != 0)
d134 1
a134 1
    if (cc != 0)
d142 1
a142 1
      if (cc != 0)
d160 1
a160 1
  if (cc != 0)
d183 1
a183 1
    if (cc != 0)
d191 1
a191 1
      if (cc != 0)
d231 1
a231 1
  if (cc != 0)
d239 1
a239 1
    if (cc != 0)
d271 1
a271 1
  if (cc != 0)
d279 1
a279 1
    if (cc != 0)
@


1.3
log
@cosmetic.
@
text
@d15 1
a15 1
static char rcsid[] = "$Id: da_msg_pp.c,v 1.2 1996/07/16 00:09:33 agray Exp agray $";
d19 3
d69 20
d94 2
d103 6
a108 1
  switch(datatype)
d110 30
a139 13
    case DA_INT:
      cc = pvm_pkint((int*)data,length,stride);
      break;
    case DA_FLOAT:
      cc = pvm_pkfloat((float*)data,length,stride);
      break;
    case DA_DOUBLE:
      cc = pvm_pkdouble((double*)data,length,stride);
      break;
    default:
      printf("bad data type passed to send_msg.\n");
      return (UT_ERROR); 
      /* should make pvm error codes correspond with UT */
d141 3
a143 1
  cc = pvm_send(target_pe,msgtag);
d145 6
a150 1
  /*
d172 1
a172 2
        return (UT_ERROR); 
*/
a173 1
  /*
d182 1
a182 1
      cc = pvm_send(target_pe,msgtag);
a189 1
  */
d192 1
d198 3
d223 15
a237 1
  cc = pvm_freebuf(buf);
d239 24
a262 1
  /*
a276 1
  */
d278 2
@


1.2
log
@added get_pe_info_cray().
@
text
@d7 2
a8 2
             This file contains functions useful for message-passing.

a10 3

  Compile:   make
  Example:   -
d15 1
a15 1
static char rcsid[] = "$Id: da_msg_pp.c,v 1.1 1996/07/11 18:13:17 agray Exp agray $";
d19 3
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
static char rcsid[] = "$Id$";
d21 4
a24 1
 *$Log$
d39 29
d278 3
@
