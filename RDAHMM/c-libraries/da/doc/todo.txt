TODO
====

DA:
===


libcp:
======

- perhaps it should be a module in the util lib?
	or perhaps some parts of util could be separate libraries, like libcp...

- use constants OPTIONAL and REQUIRED instead of TRUE and FALSE (should be
	UT_TRUE/UT_FALSE anyway), making it easier to know what each Init_Arg call
	means

- do something to eliminate the explicit assignment of an integer to each arg.
	- could use an enumerated type, then give the constant associated with each
		argument to Init_Arg, and use this once again when assigning variables
		to the argument contents

- look into the getopt() commands that exist in the C lib.; maybe do wrappers
	around these functions

- handle the problem of the memory assigned to the text of the arguments never
	being freed at the end (e.g. Free_Args()...)

libutil:
========

- boost ut_debug with ut_log (the stuff first tried in hmm code, regarding
	log levels)

- replace current error printing scheme by creating eprintf ("error printf"),
	which has the skeleton of fprintf, but uses a globally defined error 
	stream, which is log_fp

- perhaps allow an Init_Printf(), which makes it so that a constant string is
	printed before each eprintf(), like "hmm suite error:  "

- figure out how to print the line number in the program where the print is
	happening, if this info is accessible

- maybe allow a few different types of return codes besides UT_OK or UT_ERROR
	UT_ABORT (prints error message and either exits and/or tells calling 
		function to exit)
	UT_WARN (prints error message, but calling function can continue if it
		wants)
	- must figure out where this is actually useful... - try it first

- perhaps have a central set of macro renamings of function names, for the
	nicer ones, like ut_eprintf() -> eprintf(), utEqStr() -> eqstr()
	these will all be in one file, a .h, so if you have a name conflict (more 
		likely since you're not using the ut_ convention), you can only 
		include parts of this file as necessary
	- could even do this for every function - then there is a 'safe' namespace
		(the one with prefixes), and a 'nice-looking' namespace
		this would live in the same .h as the 'safe' function declaration; we
			can get rid of the k&r version to pare the .h down
