head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	97.07.29.03.26.08;	author agray;	state Exp;
branches;
next	1.2;

1.2
date	97.06.02.15.32.56;	author granat;	state Exp;
branches;
next	1.1;

1.1
date	97.01.29.23.45.59;	author agray;	state Exp;
branches;
next	;


desc
@new version after much reformatting/rethinking.
@


1.3
log
@moved out all matrix/vector stuff to da_memory.
@
text
@/*******************************************************************************
MODULE NAME
ut_memory

ONE-LINE SYNOPSIS
Utility functions related to allocating and de-allocating memory.

SCOPE OF THIS MODULE
As stated.

SEE ALSO
-

REFERENCE(S)
-

PROGRAM EXAMPLE(S)
1. /proj/cooltools/hmm, AG.

NOTES
-

AG
*******************************************************************************/
#ifndef lint
static char rcsid[] = "$Id: ut_memory.c,v 1.2 1997/06/02 15:32:56 granat Exp agray $";
#endif
/* This string variable allows the RCS identification info to be printed. */

/* 
 * $Log: ut_memory.c,v $
 * Revision 1.2  1997/06/02 15:32:56  granat
 * changed to use new NR name convention
 *
 * Revision 1.1  1997/01/29 23:45:59  agray
 * Initial revision
 *
 * */

/* C library */
#include <stdio.h>
#include <stdlib.h>

/* UT library */
#include "ut_error.h"
#include "ut_output.h"

/* this module's header */
#include "ut_memory.h"

/* global variables */
int ut_mem_used = 0;
int ut_mem_allocated = 0;


/*******************************************************************************
MALLOC_AND_TRACK
Allocate a chunk of memory.  Checks for invalid size argument, and keeps track
of the amount of memory in use and the total amount allocated (this total
includes memory which might have subsequently been freed).  

Uses calloc() in debug mode, which also clears the allocated memory of garbage 
values.  Otherwise does the quicker malloc().
AG
*******************************************************************************/
void* malloc_and_track(int size)

{
  /* check size argument for validity first */
  if (size <= 0)
  {
    err_printf();
    log_printf("Tried to allocate %s bytes.\n",size);
    return ( (void*) NULL );
  }
  else
  {
    ut_mem_used += size;
    ut_mem_allocated += size;
    if (debug_output())
      return ( (void*) calloc(1,size) );
    else
      return ( (void*) malloc(size) );
  }
}


/*******************************************************************************
FREE_AND_TRACK
De-allocate a chunk of memory.  Checks for invalid pointer argument, and keeps 
track of the amount of memory in use and the total amount allocated (this total
includes memory which might have subsequently been freed).  

Since the free() function of the C library has no method of returning errors,
this function currently simply ignores the call if a NULL pointer was passed.
AG
*******************************************************************************/
void free_and_track(void *mem, int size)

{
  /* check pointer argument for validity first */
  if (mem == (void*) NULL)
  {
    err_printf();
    log_printf("Tried to free a NULL pointer.\n");
    return;
  }
  else
  {
    ut_mem_used -= size;
    free(mem);
  }
}

@


1.2
log
@changed to use new NR name convention
@
text
@d26 1
a26 1
static char rcsid[] = "$Id: ut_memory.c,v 1.1 1997/01/29 23:45:59 agray Exp granat $";
d32 3
a111 218
  }
}

/*******************************************************************************
MATRIX_AND_TRACK, CMATRIX_AND_TRACK, IMATRIX_AND_TRACK, DMATRIX_AND_TRACK
Allocate a matrix, checking for invalid arguments and keeping track of memory
use.  Analogous to malloc_and_track().
AG
*******************************************************************************/
float** matrix_and_track(int nr, int nc)

{
  int   size;
  float **mat;

  /* compute size of matrix to be allocated */
  size  = (nr + 1) * sizeof(float*);
  size += (nr * nc + 1) * sizeof(float);

  /* check size argument for validity first */
  if ((nr <= 0) || (nc <= 0))
  {
    err_printf();
    log_printf("Tried to allocate matrix of size %d x %d.\n",nr,nc);
    return ( (float**) NULL );
  }

  /* check that allocation succeeded before tracking memory usage */
  if ( (mat = (float**) NR_matrix(1,nr,1,nc)) != (float**)NULL)
  {
    ut_mem_used += size;
    ut_mem_allocated += size;
  }

  return (mat);
}

unsigned char** cmatrix_and_track(int nr, int nc)

{
  int   size;
  unsigned char **mat;

  /* compute size of matrix to be allocated */
  size  = (nr + 1) * sizeof(unsigned char*);
  size += (nr * nc + 1) * sizeof(unsigned char);

  /* check size argument for validity first */
  if ((nr <= 0) || (nc <= 0))
  {
    err_printf();
    log_printf("Tried to allocate matrix of size %d x %d.\n",nr,nc);
    return ( (unsigned char**) NULL );
  }

  /* check that allocation succeeded before tracking memory usage */
  if ( (mat = (unsigned char**) NR_matrix(1,nr,1,nc)) != (unsigned char**)NULL)
  {
    ut_mem_used += size;
    ut_mem_allocated += size;
  }

  return (mat);
}

int** imatrix_and_track(int nr, int nc)

{
  int   size;
  int **mat;

  /* compute size of matrix to be allocated */
  size  = (nr + 1) * sizeof(int*);
  size += (nr * nc + 1) * sizeof(int);

  /* check size argument for validity first */
  if ((nr <= 0) || (nc <= 0))
  {
    err_printf();
    log_printf("Tried to allocate matrix of size %d x %d.\n",nr,nc);
    return ( (int**) NULL );
  }

  /* check that allocation succeeded before tracking memory usage */
  if ( (mat = (int**) NR_matrix(1,nr,1,nc)) != (int**)NULL)
  {
    ut_mem_used += size;
    ut_mem_allocated += size;
  }

  return (mat);
}

double** dmatrix_and_track(int nr, int nc)

{
  int   size;
  double **mat;

  /* compute size of matrix to be allocated */
  size  = (nr + 1) * sizeof(double*);
  size += (nr * nc + 1) * sizeof(double);

  /* check size argument for validity first */
  if ((nr <= 0) || (nc <= 0))
  {
    err_printf();
    log_printf("Tried to allocate matrix of size %d x %d.\n",nr,nc);
    return ( (double**) NULL );
  }

  /* check that allocation succeeded before tracking memory usage */
  if ( (mat = (double**) NR_matrix(1,nr,1,nc)) != (double**)NULL)
  {
    ut_mem_used += size;
    ut_mem_allocated += size;
  }

  return (mat);
}


/*******************************************************************************
FREE_MATRIX_AND_TRACK, FREE_CMATRIX_AND_TRACK, FREE_IMATRIX_AND_TRACK, 
  FREE_DMATRIX_AND_TRACK
De-allocate a matrix, checking for invalid arguments and keeping track of memory
use.  Analogous to free_and_track().
AG
*******************************************************************************/
void free_matrix_and_track(float **mat, int nr, int nc)

{
  int size;

  /* compute size of matrix to be de-allocated */
  size  = (nr + 1) * sizeof(float*);
  size += (nr * nc + 1) * sizeof(float);

  /* check pointer argument for validity first */
  if (mat == (float**) NULL)
  {
    err_printf();
    log_printf("Tried to free a NULL matrix.\n");
    return;
  }
  else
  {
    NR_free_matrix(mat, 1, nr, 1, nc);
    ut_mem_used -= size;
  }
}

void free_cmatrix_and_track(unsigned char **mat, int nr, int nc)

{
  int size;

  /* compute size of matrix to be de-allocated */
  size  = (nr + 1) * sizeof(unsigned char*);
  size += (nr * nc + 1) * sizeof(unsigned char);

  /* check pointer argument for validity first */
  if (mat == (unsigned char**) NULL)
  {
    err_printf();
    log_printf("Tried to free a NULL matrix.\n");
    return;
  }
  else
  {
    NR_free_cmatrix(mat, 1, nr, 1, nc);
    ut_mem_used -= size;
  }
}

void free_imatrix_and_track(int **mat, int nr, int nc)

{
  int size;

  /* compute size of matrix to be de-allocated */
  size  = (nr + 1) * sizeof(int*);
  size += (nr * nc + 1) * sizeof(int);

  /* check pointer argument for validity first */
  if (mat == (int**) NULL)
  {
    err_printf();
    log_printf("Tried to free a NULL matrix.\n");
    return;
  }
  else
  {
    NR_free_imatrix(mat, 1, nr, 1, nc);
    ut_mem_used -= size;
  }
}

void free_dmatrix_and_track(double **mat, int nr, int nc)

{
  int size;

  /* compute size of matrix to be de-allocated */
  size  = (nr + 1) * sizeof(double*);
  size += (nr * nc + 1) * sizeof(double);

  /* check pointer argument for validity first */
  if (mat == (double**) NULL)
  {
    err_printf();
    log_printf("Tried to free a NULL matrix.\n");
    return;
  }
  else
  {
    NR_free_dmatrix(mat, 1, nr, 1, nc);
    ut_mem_used -= size;
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
static char rcsid[] = "$Id$";
d31 4
a34 1
 * $Log$
d137 1
a137 1
  if ( (mat = (float**) matrix(1,nr,1,nc)) != (float**)NULL)
d165 1
a165 1
  if ( (mat = (unsigned char**) matrix(1,nr,1,nc)) != (unsigned char**)NULL)
d193 1
a193 1
  if ( (mat = (int**) matrix(1,nr,1,nc)) != (int**)NULL)
d221 1
a221 1
  if ( (mat = (double**) matrix(1,nr,1,nc)) != (double**)NULL)
d256 1
a256 1
    free_matrix(mat, 1, nr, 1, nc);
d279 1
a279 1
    free_cmatrix(mat, 1, nr, 1, nc);
d302 1
a302 1
    free_imatrix(mat, 1, nr, 1, nc);
d325 1
a325 1
    free_dmatrix(mat, 1, nr, 1, nc);
@
